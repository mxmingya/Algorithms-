public int binarySearch(int[] arr, int n){
	if(arr.length == 0) return -1;
	//setup variables
	int start = 0;
	int end = arr.length - 1;
	//search starts here
	return helper(arr,n,0,arr.length-1);
}
public int helper(int[] arr, int n, int start, int end){
	int mid = start + (end - start) / 2;
	if(arr[mid] == n) return mid;
	if(start > end) return -1;
	if(arr[mid] < n){
		return helper(arr,n,mid + 1,end);
	}
	if(arr[mid] > n){
		return helper(arr,n,start,mid -1);
	}
	return -1;
}

public int binarySearch(int[] arr, int n){
	if(arr.length == 0) return -1;
	//setup variables
	int start = 0;
	int end = arr.length - 1;
	
	//search
	while(start < end){
		int mid = start + (end - start) / 2;
		if(arr[mid] == n) return mid;
		else if(arr[mid] < n){
			start = mid;
		}else{
			end = mid;
		}
	}
	return -1;
}