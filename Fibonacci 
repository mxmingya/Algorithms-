//important concept for understanding recursion and DP
//get nth number in fibonacci sequence
public int fibonacci(int n){
	//"pure" recursion solution, will take O(2^n), very slowly
	if(n == 0) return 1;
	if(n == 1) return 1;
	
	return fibonacci(n-1) + fibonacci(n-2);
}

//solving fibonacci using in DP way(or called memoization)
public int fibonacci(int n){
	return fibonacci(int n,new int[n + 1]);//why n + 1 here???
//helper function
public int fibonacci(int n, int[] memo){
	//dynamic programming, dimish the overlaping part. 
	if(n == 0) return 1;
	if(n == 1) return 1;
	
	if(memo[n] == 0){
	memo[n] = fibonacci(n-1,arr) + fibonacci(n-2,arr);
	}
}

//DP but using extra space to optimize.
//iterative solution instead of recursion, using array to record previous sums
public int fibonacci(int n){
	int[] memo = new int[n];
	
	memo[0] = 1;
	memo[1] = 1;
	
	for(int i = 2; i < n;i++){
		memo[i] = memo[i -1] + memo[i - 2];
	}
	
	return memo[n-1];
}
	
//using additional integer to record the sum of previous ones.
public int fibonacci(int n){
	if(n == 0) return 0;
	int counter = 0;
	int a = 1;
	int b = 1;
	while(sum != n){
		c = a + b;
		a = b;
		b = c;
		counter++;
	}
	return b;
}